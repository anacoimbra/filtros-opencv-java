/**
 * Trabalho realizado para a disciplina de Processamento Digital de Imagens
 * da PUC Minas no 1° Semestre de 2016 pela aluna Ana Coimbra
 * 
 * 
 * Observacoes: 
 * 1 - Ideal utilizar imagens com resolucao 256x256. Existem algumas 
 * na pasta do projeto para utilizacao
 * 2 - As imagens devem estar na pasta raiz do projeto pois, devido a um 
 * problema de segurança, o programa não consegue ler e manipular arquivos em
 * outros diretórios
 * 3 - Atualmente nao esta implementado tratamento de erros e ainda existem 
 * alguns bugs na vizualizacao das imagens, principalmente as de saida. Entao,
 * se for o caso, basta abrir a imagem output.jpg dentro da pasta do projeto.
 */

package pdi.puc;

import java.awt.List;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfDouble;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;

/**
 * Classe de manipulacao do JFrame responsavel por criar ruidos a partir
 * do desvio padrão entre os pixels de 10 imagens de uma mesma cena.
 * @author Ana Coimbra
 */
public class Questao3 extends javax.swing.JFrame {
    
    String[] arquivos;
    Mat ruido;
    ArrayList<Mat> images = new ArrayList();


    /**
     * Creates new form Questao3
     */
    public Questao3() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnImagens = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        calcProg = new javax.swing.JProgressBar();
        btnGrafico = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblMediaRuido = new javax.swing.JLabel();
        btnMediaRuido = new javax.swing.JButton();

        btnImagens.setText("Selecionar Imagens");
        btnImagens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImagensActionPerformed(evt);
            }
        });

        jButton1.setText("Calcular Desvio Padrão");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnGrafico.setText("Gerar Gráfico");
        btnGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );

        btnMediaRuido.setText("Calcular Média do Ruído");
        btnMediaRuido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMediaRuidoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(calcProg, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblMediaRuido))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnImagens)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(btnGrafico)
                                .addGap(18, 18, 18)
                                .addComponent(btnMediaRuido)))
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImagens)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGrafico)
                    .addComponent(btnMediaRuido))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calcProg, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMediaRuido))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo para resolver o click no botão que o usuário poderá escolher
     * as imagens que servirão de entrada para o problema.
     * @param evt 
     */
    private void btnImagensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagensActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG & GIF Images", "jpg", "gif", "png");
        chooser.setFileFilter(filter);
        chooser.setMultiSelectionEnabled(true);
        int returnVal = chooser.showOpenDialog(getComponent(0));
        if(returnVal == JFileChooser.APPROVE_OPTION){
            File[] files = chooser.getSelectedFiles();
            arquivos = new String[files.length];
            for(int i = 0; i < files.length; i++){
                files[i].setReadable(Boolean.TRUE);
                arquivos[i] = files[i].getAbsolutePath();
            }
            
        }
    }//GEN-LAST:event_btnImagensActionPerformed

    /**
     * Metodo que resolve o click no botao que ira calcular o desvio padrao 
     * entre os pixels das imagens.
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        
        /**
         * Array temporario que irá armazenar os valores de um pixel 
         * para todas as imagens de entrada.
         */
        double[] tmp = new double[arquivos.length];
        
        /**
         * Tranforma imagens em matrizes em escala de cinza
         */
        for(String s : arquivos){
            images.add(Imgcodecs.imread(s, Imgcodecs.CV_LOAD_IMAGE_GRAYSCALE));
        }
        
        /**
         * Matriz que irá armazenar os valores de desvio padrão
         */
        double[][] stdDev = new double[images.get(0).rows()][images.get(0).cols()];
   
        /**
         * Calculo do desvio padrão para cada pixel de todas as imagens.
         */
        for(int i = 0; i < images.get(0).rows(); i++){
            for(int j = 0; j < images.get(0).cols(); j++){
                for(int k = 0; k < arquivos.length; k ++){
                    tmp[k] = images.get(k).get(i, j)[0];
                }
                double tmpDev = Math.sqrt(somatorio(tmp) / arquivos.length);
                stdDev[i][j] = tmpDev;

                /**
                 * Atualiza a barra de progresso
                 */
                int progresso = i * 100;
                calcProg.setValue(progresso);
                calcProg.setStringPainted(true);

            }
        }
        
        /**
         * Cria uma matriz opencv do tipo escala de cinza
         */
        ruido = new Mat(new Size((int)images.get(0).cols(), (int)images.get(0).rows()),CvType.CV_8UC1);
        /**
         * Matriz que ira receber a matriz de desvio padrão normalizada
         * Maior ruído = 255
         * Ausência de ruído = 0
         */
        double[][] d = normalizacao(stdDev);
        /**
         * Salva o resultado na imagem ruido.jpg
         */
        Imgcodecs.imwrite("ruido.jpg",ruido);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Metodo que cria os dados que serão base para o grafico da média dos pixels
     * @return dataset
     */
    private CategoryDataset createDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for(int i = 0; i < images.get(0).cols(); i ++){
            double med1 = 0;
            double med2 = 0;
            for(int x = 0; x < images.size(); x++){
                med1 += (images.get(x).get(0, i)[0]);
                med2 += (images.get(x).get(0, i)[0]);
            }
            med1 /= images.size();
            med2 /= images.size();
            
            dataset.addValue(med1  - ruido.get(0, i)[0],"Media - Ruído", "Pixel" + i);
            dataset.addValue(med2 + ruido.get(0, i)[0],"Media + Ruído", "Pixel" + i);
        }
        
        return dataset;
    
    }
    
    /**
     * Metodo cria e exibe o gráfico da media dos pixels das imagens resultantes
     * @throws IOException 
     */
    public void criaGrafico() throws IOException {
        CategoryDataset cds = createDataset();
        String titulo = "Média da Primeira linha de pixels";
        String eixoy = "Valores";
        String txt_legenda = "Pixels";
        boolean legenda = true;
        boolean tooltips = true;
        boolean urls = true;
        JFreeChart graf = ChartFactory.createLineChart(titulo, txt_legenda, eixoy, cds);
        ChartPanel myChartPanel = new ChartPanel(graf, true);
        myChartPanel.setSize(jPanel1.getWidth(),jPanel1.getHeight());
        myChartPanel.setVisible(true); 
        jPanel1.removeAll();
        jPanel1.add(myChartPanel); 
        jPanel1.revalidate();
        jPanel1.repaint(); 
        
        File lineChart = new File( "grafico.jpeg" ); 
        ChartUtilities.saveChartAsJPEG(lineChart ,graf, 512 ,256);
    }
    
    /**
     * Metodo que resolve o click no botao para gerar o gráfico da 
     * média dos valores dos pixels
     * @param evt 
     */
    private void btnGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficoActionPerformed
        try {
            criaGrafico();
        } catch (IOException ex) {
            Logger.getLogger(Questao3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGraficoActionPerformed

    /**
     * Metodo que resolve o click no botao que calcula o valor da 
     * média da imagem de ruido.
     * @param evt 
     */
    private void btnMediaRuidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMediaRuidoActionPerformed
        /**
         * Core.mean(Mat) retorna o valor da media dos valores
         */
        Scalar d = Core.mean(ruido);
        lblMediaRuido.setText("Média do ruído: " + d.val[0]);
    }//GEN-LAST:event_btnMediaRuidoActionPerformed

    /**
     * Metodo para normalizar uma matriz
     * maior valor = 255
     * menor valor = 0
     * @param matriz
     * @return 
     */
    public double[][] normalizacao(double[][] matriz){
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /**
         * Maior e menor valor da matriz
         */
        double max = maxValue(matriz);
        double min = minValue(matriz);
        
        /**
         * Calcula a distancia entre os valores, que será o valor 
         * utilizado para normalizar
         */
        double dis = 255 / (max - min);
        
        /**
         * Matriz resultante = copia da original
         */
        double[][] result = matriz.clone();
        
        /**
         * Normalizacao - para cada pixel da matriz, multiplica-se o valor dis.
         */
        for(int i = 0; i < result.length; i++){
            for(int j = 0; j < result[0].length; j++){
                result[i][j] *= dis;
                ruido.put(i, j, result[i][j]);
            }
        }
        
        /**
         * Restorna o resultado
         */
        return result;
    }
    
    /**
     * Metodo que retorna o maior valor da matriz
     * @param matriz
     * @return double max
     */
    public double maxValue(double[][] matriz){
        double max = Double.MIN_VALUE;
        for(double[] linha : matriz){
            for(double d : linha){
                if(d > max){
                    max = d;
                }
            }
        }
        return max;
    }
    
    /**
     * Metodo que retorna o menor valor de uma matriz
     * @param matriz
     * @return double min
     */
    public double minValue(double[][] matriz){
        double min = Double.MAX_VALUE;
        for(double[] linha : matriz){
            for(double d : linha){
                if(d < min){
                    min = d;
                }
            }
        }
        return min;
    }
    
    /**
     * Metodo que soma os valores de um array
     * @param array
     * @return 
     */
    public double somatorio(double[] array){
        double sum = 0;
        double media = media(array);
        
        for(double d : array){
            double x = Math.pow((d - media), 2);
            sum += x;
        }
        return sum;
    }
    
    /**
     * Metodo que calcula a media de um array
     * @param array
     * @return 
     */
    public double media(double[] array){
        double sum = 0;
        for(double d : array){
            sum += d;
        }
        return sum / array.length;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Questao3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Questao3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Questao3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Questao3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Questao3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGrafico;
    private javax.swing.JButton btnImagens;
    private javax.swing.JButton btnMediaRuido;
    private javax.swing.JProgressBar calcProg;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblMediaRuido;
    // End of variables declaration//GEN-END:variables
}
