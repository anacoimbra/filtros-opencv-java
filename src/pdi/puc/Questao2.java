/**
 * Trabalho realizado para a disciplina de Processamento Digital de Imagens
 * da PUC Minas no 1° Semestre de 2016 pela aluna Ana Coimbra
 * 
 * 
 * Observacoes: 
 * 1 - Ideal utilizar imagens com resolucao 256x256. Existem algumas 
 * na pasta do projeto para utilizacao
 * 2 - As imagens devem estar na pasta raiz do projeto pois, devido a um 
 * problema de segurança, o programa não consegue ler e manipular arquivos em
 * outros diretórios
 * 3 - Atualmente nao esta implementado tratamento de erros e ainda existem 
 * alguns bugs na vizualizacao das imagens, principalmente as de saida. Entao,
 * se for o caso, basta abrir a imagem output.jpg dentro da pasta do projeto.
 */
package pdi.puc;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import static org.opencv.core.Core.normalize;
import static org.opencv.core.Core.randn;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 * Classe de manipulacao do JFrame responsavel por criar ruidos e aplicar 
 * filtros espaciais
 * @author Ana Coimbra
 */
public class Questao2 extends javax.swing.JFrame {

    String urlImg = "";
    /**
     * Creates new form Questao2
     */
    public Questao2() {
        initComponents();
        /**
         * Configura tamanho da tela para o tamanho da tela do dispositivo
         */
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension d = tk.getScreenSize();
        this.setSize(d.width, 720);
        
        buttonGroup1.add(rbGaussiano);
        buttonGroup1.add(rbOriginal);
        buttonGroup1.add(rbSalPimenta);
        
        buttonGroup1.setSelected(rbOriginal.getModel(), true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btnImagem = new javax.swing.JButton();
        btnRuidos = new javax.swing.JButton();
        btnMedia = new javax.swing.JButton();
        btnMediana = new javax.swing.JButton();
        btnGaussiano = new javax.swing.JButton();
        btnMaximo = new javax.swing.JButton();
        btnMinimo = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtMatrixWidth = new javax.swing.JTextField();
        txtMatrixHeight = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtKsize = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSygmaX = new javax.swing.JTextField();
        txtSygmaY = new javax.swing.JTextField();
        rbOriginal = new javax.swing.JRadioButton();
        rbGaussiano = new javax.swing.JRadioButton();
        rbSalPimenta = new javax.swing.JRadioButton();

        btnImagem.setText("Escolher Imagem");
        btnImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImagemActionPerformed(evt);
            }
        });

        btnRuidos.setText("Gerar Ruídos");
        btnRuidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRuidosActionPerformed(evt);
            }
        });

        btnMedia.setText("Média");
        btnMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMediaActionPerformed(evt);
            }
        });

        btnMediana.setText("Mediana");
        btnMediana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedianaActionPerformed(evt);
            }
        });

        btnGaussiano.setText("Gaussiano");
        btnGaussiano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGaussianoActionPerformed(evt);
            }
        });

        btnMaximo.setText("Máximo");
        btnMaximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaximoActionPerformed(evt);
            }
        });

        btnMinimo.setText("Mínimo");
        btnMinimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimoActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtMatrixWidth.setText("3");
        txtMatrixWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMatrixWidthActionPerformed(evt);
            }
        });

        txtMatrixHeight.setText("3");
        txtMatrixHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMatrixHeightActionPerformed(evt);
            }
        });

        jLabel1.setText("Dimensões da Máscara");

        jLabel2.setText("KSize");

        txtKsize.setText("5");

        jLabel3.setText("Sygma");

        txtSygmaX.setText("2");
        txtSygmaX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSygmaXActionPerformed(evt);
            }
        });

        txtSygmaY.setText("2");
        txtSygmaY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSygmaYActionPerformed(evt);
            }
        });

        rbOriginal.setText("Original");

        rbGaussiano.setText("Gaussiano");

        rbSalPimenta.setText("Sal & Pimenta");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rbOriginal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbGaussiano)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbSalPimenta)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtKsize, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(txtMatrixWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtMatrixHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSygmaX, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtSygmaY, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMatrixWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMatrixHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtKsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtSygmaX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSygmaY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbOriginal)
                    .addComponent(rbGaussiano)
                    .addComponent(rbSalPimenta))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnImagem, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRuidos, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMedia, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMediana, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGaussiano, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnMaximo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMinimo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(86, 86, 86))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImagem)
                    .addComponent(btnRuidos)
                    .addComponent(btnMedia)
                    .addComponent(btnMediana)
                    .addComponent(btnGaussiano)
                    .addComponent(btnMaximo)
                    .addComponent(btnMinimo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo para resolver click no botao que escolhe a imagem que sera 
     * utilizada para os filtros e ruidos
     * @param evt 
     */
    private void btnImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagemActionPerformed
        /**
         * Abre dialogo para escolha da imagem
         * Aceita formatos JPEG, GIF e PNG
         */
        JFileChooser arquivo1 = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "Images", "jpg", "gif", "png");
        arquivo1.setFileFilter(filter);
        int returnVal = arquivo1.showOpenDialog(getComponent(0));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: " +
                arquivo1.getSelectedFile().getAbsolutePath());
            
            /**
             * urlImg recebe o caminho completo da imagem escolhida
             */
            urlImg = arquivo1.getSelectedFile().getName();
           
            Image img = (new ImageIcon(urlImg)).getImage();
            
            /**
             * Exibe imagem na tela
             */
            Original original = new Original(img);
            original.paintComponent(getGraphics());
            add(original);
        }
    }//GEN-LAST:event_btnImagemActionPerformed

    /**
     * 
     * @param evt 
     */
    private void btnRuidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRuidosActionPerformed
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /**
         * Transforma imagem em matriz para facilitar manipulacao
         */
        Mat original = Imgcodecs.imread(urlImg);
        
        /**
         * Geracao de ruido gaussiano
         */
        // faz um clone da imagem original
        Mat original_Bgr = original.clone();
        
        // cria uma imagem e inicializa com valores aleatorios
        Mat mGaussian_noise = new Mat(original_Bgr.size(), original_Bgr.type());
        // randn(matriz destino, valor principal (espectativa), desvio padrao)
        randn(mGaussian_noise,0,50);
        
        // aplicacao do ruido: original(clone) + mGaussian_noise
        for(int m = 0; m < original_Bgr.rows(); m++){
            for(int n = 0; n < original_Bgr.cols(); n++){
                double[] val = new double[3];
                for(int i = 0; i < original_Bgr.get(m,n).length; i++){
                    val[i] = original_Bgr.get(m,n)[i] + mGaussian_noise.get(m, n)[i];
                }
                original_Bgr.put(m, n, val);
            }
        }

        // normalize(matriz entrada, matriz saida, valor minimo, valor maximo, tipo de normalizacao, tipo da imagem de saida)
        normalize(original_Bgr,original_Bgr,0, 255, Core.NORM_MINMAX, CvType.CV_8UC3);
        
        // salva resultado do ruido gaussiano na imagem "gaussian.jpg"
        Imgcodecs.imwrite("gaussian.jpg", original_Bgr);
        Image img = (new ImageIcon("gaussian.jpg")).getImage();

        /**
         * Exibe imagem do ruido gaussiano na Tela
         */
        Gaussiano gaussiano = new Gaussiano(img);
        gaussiano.paintComponent(getGraphics());
        add(gaussiano);
        
        /**
         * Geracao do ruido Sal e Pimenta
         */
        // obtem clone da matriz original
        Mat saltPepper_img = original.clone();
        // cria matriz para o ruido e inicializa com valor aleatorios
        Mat mSaltPepper_noise = new Mat(original_Bgr.size(), saltPepper_img.type());
        // randn(matriz destino, valor principal (espectativa), desvio padrao)
        randn(mSaltPepper_noise,0,255);
        // utilizando da matriz de numeros aleatorios, verifica valores 
        // muito baixos e os substituem por zero na matriz resultante (copia da original)
        // e os valores muito altos sao substituidos por 255
        for(int m = 0; m < saltPepper_img.rows(); m++){
            for(int n = 0; n < saltPepper_img.cols(); n++){
                double[] val = new double[3];
                if(mSaltPepper_noise.get(m,n)[0] < 15 && mSaltPepper_noise.get(m,n)[1] < 15 && mSaltPepper_noise.get(m,n)[2] < 15){
                    for(int i = 0; i < saltPepper_img.get(m,n).length; i++){
                        val[i] = 0;
                    }
                    saltPepper_img.put(m, n, val);
                }
                if(mSaltPepper_noise.get(m,n)[0] > 230 && mSaltPepper_noise.get(m,n)[1] > 230 && mSaltPepper_noise.get(m,n)[2] > 230){
                    for(int i = 0; i < saltPepper_img.get(m,n).length; i++){
                        val[i] = 255;
                    }
                    saltPepper_img.put(m, n, val);
                }
            }
        }

        // normalize(matriz entrada, matriz saida, valor minimo, valor maximo, tipo de normalizacao, tipo da imagem de saida)
        normalize(saltPepper_img,saltPepper_img,0, 255, Core.NORM_MINMAX, CvType.CV_8UC3);
        
        /**
         * Salva imagem resultante em saltapepper.jpg
         */
        Imgcodecs.imwrite("saltpepper.jpg", saltPepper_img);
        Image img1 = (new ImageIcon("saltpepper.jpg")).getImage();
        
        /**
         * Exibe imagem na Tela
         */
        SalPimenta salEpimenta = new SalPimenta(img1);
        salEpimenta.paintComponent(getGraphics());
        add(salEpimenta);
    }//GEN-LAST:event_btnRuidosActionPerformed

    /**
     * Metodo para resolver evento de click no botao para aplicar o filtro da
     * media na imagem selecionada
     * @param evt 
     */
    private void btnMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMediaActionPerformed
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        String url = "";
        /**
         * Seleciona o src da imagem a partir da escolha do usuario na Tela
         */
        if(rbOriginal.isSelected()){
            url = urlImg;
        }else if(rbGaussiano.isSelected()){
            url = "gaussian.jpg";
        }else if(rbSalPimenta.isSelected()){
            url = "saltpepper.jpg";
        }
        
        /**
         * Transforma imagem em matriz para facilitar manipulacao
         */
        Mat img = Imgcodecs.imread(url);
        /**
         * Cria matriz de destino
         */
        Mat dst = new Mat();
        /**
         * Aplicacao do filtro da media
         * blur(matriz original, matriz destino, tamanho da mascara)
         */
        Imgproc.blur(img, dst, new Size(Integer.valueOf(txtMatrixWidth.getText()),Integer.valueOf(txtMatrixHeight.getText())));
        /**
         * Salva o resultado em media.jpg
         */
        Imgcodecs.imwrite("media.jpg", dst);
        
        /**
         * Exibe imagem na Tela
         */
        Image img_media = (new ImageIcon("media.jpg")).getImage();
        Media media = new Media(img_media);
        media.paintComponent(getGraphics());
        add(media);
    }//GEN-LAST:event_btnMediaActionPerformed

    /**
     * Metodo para resolver o evento de click no botao que aplica o filtro da mediana
     * @param evt 
     */
    private void btnMedianaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedianaActionPerformed
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        String url = "";
        /**
         * Obtem a url da imagem seleciona previamente pelo usuario na interface
         */
        if(rbOriginal.isSelected()){
            url = urlImg;
        }else if(rbGaussiano.isSelected()){
            url = "gaussian.jpg";
        }else if(rbSalPimenta.isSelected()){
            url = "saltpepper.jpg";
        }
        /**
         * Transforma imagem em matriz para facilitar manipulacao
         */
        Mat img = Imgcodecs.imread(url);
        /**
         * Cria matriz de destino
         */
        Mat dst = new Mat();
        /**
         * Aplica filtro da mediana
         * medianBlur(imagem original, imagem destino, ksize)
         */
        Imgproc.medianBlur(img, dst,Integer.valueOf(txtKsize.getText()));
        /**
         * Salva resultado em mediana.jpg
         */
        Imgcodecs.imwrite("mediana.jpg", dst);
        
        /**
         * Exibe imagem na tela
         */
        Image img_media = (new ImageIcon("mediana.jpg")).getImage();
        Mediana media = new Mediana(img_media);
        media.paintComponent(getGraphics());
        add(media);
    }//GEN-LAST:event_btnMedianaActionPerformed

    /**
     * Metodo que resolve o click no mouse do botao que aplica o filtro gaussiano
     * @param evt 
     */
    private void btnGaussianoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGaussianoActionPerformed
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        String url = "";
        /**
         * Seleciona a url de acordo com a imagem escolhida pelo usuario na interface
         */
        if(rbOriginal.isSelected()){
            url = urlImg;
        }else if(rbGaussiano.isSelected()){
            url = "gaussian.jpg";
        }else if(rbSalPimenta.isSelected()){
            url = "saltpepper.jpg";
        }
        /**
         * Transforma imagem em matriz para facilitar manipulacao
         */
        Mat img = Imgcodecs.imread(url);
        /**
         * Cria matriz de destino
         */
        Mat dst = new Mat();
        /**
         * Aplica o filtro gaussiano
         * GaussianBlur(imagem original, imgagem destino, tamanho da mascara, sygmaX, sygmaY)
         */
        Imgproc.GaussianBlur(img, dst,new Size(Integer.valueOf(txtMatrixWidth.getText()),Integer.valueOf(txtMatrixHeight.getText())),Integer.valueOf(txtSygmaX.getText()), Integer.valueOf(txtSygmaY.getText()));
        /**
         * Salva resultado em gaussian-blur.jpg
         */
        Imgcodecs.imwrite("gaussian-blur.jpg", dst);
        
        /**
         * Exibe imagem na Tela
         */
        Image img_gau = (new ImageIcon("gaussian-blur.jpg")).getImage();
        GaussianoBlur gau = new GaussianoBlur(img_gau);
        gau.paintComponent(getGraphics());
        add(gau);
    }//GEN-LAST:event_btnGaussianoActionPerformed

    /**
     * Metodo para resolver o evento de click no botao que aplica o filtro de maximo
     * @param evt 
     */
    private void btnMaximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaximoActionPerformed
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        String url = "";
        /**
         * Seleciona a url de acordo com a imagem selecionada pelo usuario
         */
        if(rbOriginal.isSelected()){
            url = urlImg;
        }else if(rbGaussiano.isSelected()){
            url = "gaussian.jpg";
        }else if(rbSalPimenta.isSelected()){
            url = "saltpepper.jpg";
        }
        /**
         * Transforma imagem em matriz para facilitar manipulacao
         */ 
        Mat img = Imgcodecs.imread(url);
        /**
         * Cria matriz destinoo
         */
        Mat dst = new Mat();
        /**
         * Cria imagem com o valor 1 em todos os pixels de 
         * tamnho escolhido pelo usuario
         */
        Mat one = Mat.ones(Integer.valueOf(txtMatrixWidth.getText()),Integer.valueOf(txtMatrixHeight.getText()), CvType.CV_32F);
        /**
         * Aplica o filtro maximo utilizando a matriz one como mascara
         * dilate(imagem original, imagem destino, mascara)
         */
        Imgproc.dilate(img, dst, one);
        /**
         * Salva o resultado na matriz maximo.jpg
         */
        Imgcodecs.imwrite("maximo.jpg", dst);
        
        /**
         * Exibe imagem na tela
         */
        Image img_gau = (new ImageIcon("maximo.jpg")).getImage();
        Maximo gau = new Maximo(img_gau);
        gau.paintComponent(getGraphics());
        add(gau);
    }//GEN-LAST:event_btnMaximoActionPerformed

    /**
     * Metodo para resolver o evento de click no botao que aplica o filtro de minimo
     * @param evt 
     */
    private void btnMinimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimoActionPerformed
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        String url = "";
        /**
         * Seleciona a url de acordo com a imagem escolhida 
         * pelo usuario na interface
         */
        if(rbOriginal.isSelected()){
            url = urlImg;
        }else if(rbGaussiano.isSelected()){
            url = "gaussian.jpg";
        }else if(rbSalPimenta.isSelected()){
            url = "saltpepper.jpg";
        }
        /**
         * Transforma imagem em matriz para facilitar manipulacao
         */
        Mat img = Imgcodecs.imread(url);
        /**
         * Cria matriz de destino
         */
        Mat dst = new Mat();
        /**
         * Cria matriz com o valor 1 em todos os pixels de 
         * tamanho definido pelo usuario
         */
        Mat one = Mat.ones(Integer.valueOf(txtMatrixWidth.getText()),Integer.valueOf(txtMatrixHeight.getText()), CvType.CV_32F);
        /**
         * Aplica o filtro minimo
         * erode(imagem original, imagem destino, matriz de mascara)
         */
        Imgproc.erode(img, dst, one);
        /**
         * Salva resultado em minimo.jpg
         */
        Imgcodecs.imwrite("minimo.jpg", dst);
        
        /**
         * Exibe imagem na tela
         */
        Image img_gau = (new ImageIcon("minimo.jpg")).getImage();
        Minimo gau = new Minimo(img_gau);
        gau.paintComponent(getGraphics());
        add(gau);
    }//GEN-LAST:event_btnMinimoActionPerformed

    private void txtMatrixWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMatrixWidthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMatrixWidthActionPerformed

    private void txtMatrixHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMatrixHeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMatrixHeightActionPerformed

    private void txtSygmaXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSygmaXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSygmaXActionPerformed

    private void txtSygmaYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSygmaYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSygmaYActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Questao2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Questao2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Questao2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Questao2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Questao2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGaussiano;
    private javax.swing.JButton btnImagem;
    private javax.swing.JButton btnMaximo;
    private javax.swing.JButton btnMedia;
    private javax.swing.JButton btnMediana;
    private javax.swing.JButton btnMinimo;
    private javax.swing.JButton btnRuidos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton rbGaussiano;
    private javax.swing.JRadioButton rbOriginal;
    private javax.swing.JRadioButton rbSalPimenta;
    private javax.swing.JTextField txtKsize;
    private javax.swing.JTextField txtMatrixHeight;
    private javax.swing.JTextField txtMatrixWidth;
    private javax.swing.JTextField txtSygmaX;
    private javax.swing.JTextField txtSygmaY;
    // End of variables declaration//GEN-END:variables
}

/**
 * Classe para facilitar vizualicao da imagem original
 * @author Ana Coimbra
 */
class Original extends JPanel { 
    private Image img; 
    
    public Original(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    @Override
    public void paintComponent(Graphics g) {
        g.drawImage(img, 10, 88, null);
    } 
} 

/**
 * Classe para facilitar vizualicao da imagem com ruido gaussiano
 * @author Ana Coimbra
 */
class Gaussiano extends JPanel { 
    private Image img; 
    
    public Gaussiano(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 276, 88, null);
    } 
} 

/**
 * Classe para facilitar vizualicao da imagem com ruido sal e pimenta
 * @author Ana Coimbra
 */
class SalPimenta extends JPanel { 
    private Image img; 
    
    public SalPimenta(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 542, 88, null);
    } 
}

/**
 * Classe para facilitar vizualicao da imagem com filtro da media
 * @author Ana Coimbra
 */
class Media extends JPanel { 
    private Image img; 
    
    public Media(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 10, 88 + 266, null);
    } 
}

/**
 * Classe para facilitar vizualicao da imagem com filtro da mediana
 * @author Ana Coimbra
 */
class Mediana extends JPanel { 
    private Image img; 
    
    public Mediana(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 10 + 266, 88 + 266, null);
    } 
}

/**
 * Classe para facilitar vizualicao da imagem com filtrro gaussiano
 * @author Ana Coimbra
 */
class GaussianoBlur extends JPanel { 
    private Image img; 
    
    public GaussianoBlur(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 10 + 532, 88 + 266, null);
    } 
}

/**
 * Classe para facilitar vizualicao da imagem com filtro do maximo
 * @author Ana Coimbra
 */
class Maximo extends JPanel { 
    private Image img; 
    
    public Maximo(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 10 + 532 + 266, 88 + 266, null);
    } 
}

/**
 * Classe para facilitar vizualicao da imagem com filtro do minimo
 * @author Ana Coimbra
 */
class Minimo extends JPanel { 
    private Image img; 
    
    public Minimo(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 10 + 532 + 532, 88 + 266, null);
    } 
}