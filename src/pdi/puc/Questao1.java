/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pdi.puc;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;

/**
 *
 * @author aninh
 */
public class Questao1 extends javax.swing.JFrame {

    private String urlImg1 = "";
    private String urlImg2 = "";

    /**
     * Creates new form Questao1
     */
    public Questao1() {
        initComponents();
         
        this.setSize(800, 380);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnImagem1 = new javax.swing.JButton();
        btnImagem2 = new javax.swing.JButton();
        cbOperacao = new javax.swing.JComboBox<>();
        btnGo = new javax.swing.JButton();

        btnImagem1.setText("Escolher Imagem 1");
        btnImagem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImagem1ActionPerformed(evt);
            }
        });

        btnImagem2.setText("Escolher Imagem 2");
        btnImagem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImagem2ActionPerformed(evt);
            }
        });

        cbOperacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR", "XOR", "NOT", "SOMA", "SUBTRAÇÃO", "MULTIPLICAÇÃO", "DIVISÃO" }));
        cbOperacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOperacaoActionPerformed(evt);
            }
        });

        btnGo.setText("Calcular");
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnImagem1)
                .addGap(18, 18, 18)
                .addComponent(btnImagem2)
                .addGap(18, 18, 18)
                .addComponent(cbOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGo)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImagem1)
                    .addComponent(btnImagem2)
                    .addComponent(cbOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGo))
                .addContainerGap(266, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImagem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagem1ActionPerformed
        JFileChooser arquivo1 = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG & GIF Images", "jpg", "gif");
        arquivo1.setFileFilter(filter);
        int returnVal = arquivo1.showOpenDialog(getComponent(0));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: " +
                arquivo1.getSelectedFile().getName());
            urlImg1 = arquivo1.getSelectedFile().getName();
           
            Image img1 = (new ImageIcon(urlImg1)).getImage();

            Imagem1 image1 = new Imagem1(img1);
            image1.paintComponent(getGraphics());
            add(image1);
        }
    }//GEN-LAST:event_btnImagem1ActionPerformed

    private void btnImagem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagem2ActionPerformed
        JFileChooser arquivo1 = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG & GIF Images", "jpg", "gif");
        arquivo1.setFileFilter(filter);
        int returnVal = arquivo1.showOpenDialog(getComponent(0));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: " +
                arquivo1.getSelectedFile().getName());
            urlImg2 = arquivo1.getSelectedFile().getName();
           
            Image img1 = (new ImageIcon(urlImg2)).getImage();
            
            Imagem2 image2 = new Imagem2(img1);
            image2.paintComponent(getGraphics());
            add(image2);
        }
    }//GEN-LAST:event_btnImagem2ActionPerformed

    private void cbOperacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOperacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbOperacaoActionPerformed

    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
        String action = cbOperacao.getSelectedItem().toString();

        Mat image1 = Imgcodecs.imread(urlImg1);
        Mat image2 = Imgcodecs.imread(urlImg2);
        
        Mat output = new Mat(256,256,CvType.CV_8UC3);
        
        switch(action){
            case "AND":
                for(int m = 0; m < image1.cols(); m++){
                    for(int n = 0; n < image1.rows(); n++){
                        double[] px1 = image1.get(n,m);              
                        double[] px2 = image2.get(n,m);
                        byte[] px = new byte[3];
                        
                        px[0] = (byte)((char)px1[0] & (char)px2[0]);
                        px[1] = (byte)((byte)px1[1] & (byte)px2[1]);
                        px[2] = (byte)((byte)px1[2] & (byte)px2[2]);
                        
                        output.put(n,m,px);
                    }
                }
                break;
            case "OR":
                for(int m = 0; m < image1.cols(); m++){
                    for(int n = 0; n < image1.rows(); n++){
                        double[] px1 = image1.get(n,m);              
                        double[] px2 = image2.get(n,m);
                        double[] px = new double[3];
                        
                        px[0] = (int)px1[0] | (int)px2[0];
                        px[1] = (int)px1[1] | (int)px2[1];
                        px[2] = (int)px1[2] | (int)px2[2];
                        
                        output.put(n,m,px);
                    }
                }
                break;
            case "XOR":
                for(int m = 0; m < image1.cols(); m++){
                    for(int n = 0; n < image1.rows(); n++){
                        double[] px1 = image1.get(n,m);              
                        double[] px2 = image2.get(n,m);
                        double[] px = new double[3];
                        
                        px[0] = (int)px1[0] ^ (int)px2[0];
                        px[1] = (int)px1[1] ^ (int)px2[1];
                        px[2] = (int)px1[2] ^ (int)px2[2];
                        
                        output.put(n,m,px);
                    }
                }
                break;
            case "NOT":
                for(int m = 0; m < image1.cols(); m++){
                    for(int n = 0; n < image1.rows(); n++){
                        double[] px1 = image1.get(n,m);              
                        double[] px2 = image2.get(n,m);
                        double[] px = new double[3];
                        
                        px[0] = (-px1[0]) + 255;
                        px[1] = (-px1[1]) + 255;
                        px[2] = (-px1[2]) + 255;
                        
                        output.put(n,m,px);
                    }
                }
                break;
            case "SOMA":
                for(int m = 0; m < image1.cols(); m++){
                    for(int n = 0; n < image1.rows(); n++){
                        double[] px1 = image1.get(n,m);              
                        double[] px2 = image2.get(n,m);
                        double[] px = new double[3];
                        
                        px[0] = px1[0] + px2[0] - 255;
                        px[1] = px1[1] + px2[1] - 255;
                        px[2] = px1[2] + px2[2] - 255;
                        
                        output.put(n,m,px);
                    }
                }
                break;
            case "SUBTRAÇÃO":
                for(int m = 0; m < image1.cols(); m++){
                    for(int n = 0; n < image1.rows(); n++){
                        double[] px1 = image1.get(n,m);              
                        double[] px2 = image2.get(n,m);
                        double[] px = new double[3];
                        
                        px[0] = ((int)px2[0] - (int)px1[0]) + 255 & ((int)px1[0] - (int)px2[0]) + 255;
                        px[1] = ((int)px2[1] - (int)px1[1]) + 255 & ((int)px1[1] - (int)px2[1]) + 255;
                        px[2] = ((int)px2[2] - (int)px1[2]) + 255 & ((int)px1[2] - (int)px2[2]) + 255;
                        
                        output.put(n,m,px);
                    }
                }
                break;
            case "MULTIPLICAÇÃO":
                for(int m = 0; m < image1.cols(); m++){
                    for(int n = 0; n < image1.rows(); n++){
                        double[] px1 = image1.get(n,m);              
                        double[] px2 = image2.get(n,m);
                        double[] px = new double[3];
                        
                        px[0] = (px2[0] * px1[0]) / 255;
                        px[1] = (px1[1] * px2[1]) / 255;
                        px[2] = (px1[2] * px2[2]) / 255;
                        
                        output.put(n,m,px);
                    }
                }
                break;
            case "DIVISÃO":
                for(int m = 0; m < image1.cols(); m++){
                    for(int n = 0; n < image1.rows(); n++){
                        double[] px1 = image1.get(n,m);              
                        double[] px2 = image2.get(n,m);
                        double[] px = new double[3];
                        
                        px[0] = (px2[0] / px1[0]) * 255;
                        px[1] = (px1[1] / px2[1]) * 255;
                        px[2] = (px1[2] / px2[2]) * 255;
                        
                        output.put(n,m,px);
                    }
                }
                break;
        }
        
        Imgcodecs.imwrite("output.jpg", output);
        System.out.println("Finalizado");
        Image out = new ImageIcon("output.jpg").getImage();
        Output image3 = new Output(out);
        image3.paintComponent(getGraphics());
        add(image3);
    }//GEN-LAST:event_btnGoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Questao1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Questao1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Questao1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Questao1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Questao1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnImagem1;
    private javax.swing.JButton btnImagem2;
    private javax.swing.JComboBox<String> cbOperacao;
    // End of variables declaration//GEN-END:variables
}

class Imagem1 extends JPanel { 
    private Image img; 
    
    public Imagem1(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    @Override
    public void paintComponent(Graphics g) {
        g.drawImage(img, 10, 88, null);
    } 
} 

class Imagem2 extends JPanel { 
    private Image img; 
    
    public Imagem2(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 276, 88, null);
    } 
} 

class Output extends JPanel { 
    private Image img; 
    
    public Output(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 542, 88, null);
    } 
} 
