/**
 * Trabalho realizado para a disciplina de Processamento Digital de Imagens
 * da PUC Minas no 1° Semestre de 2016 pela aluna Ana Coimbra
 * 
 * 
 * Observacoes: 
 * 1 - Ideal utilizar imagens com resolucao 256x256. Existem algumas 
 * na pasta do projeto para utilizacao
 * 2 - Atualmente nao esta implementado tratamento de erros e ainda existem 
 * alguns bugs na vizualizacao das imagens, principalmente as de saida. Entao,
 * se for o caso, basta abrir a imagem output.jpg dentro da pasta do projeto.
 */
package pdi.puc;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.PageAttributes;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 * Classe de manipulacao do JFrame responsavel por realizar operacoes entre 
 * duas imagens
 * @author Ana Coimbra
 */
public class Questao1 extends javax.swing.JFrame {

    // Imagem que aparece a esquerda
    private String urlImg1 = "";
    // Imagem que aparece a direita
    private String urlImg2 = "";

    /**
     * Creates new form Questao1
     */
    public Questao1() {
        initComponents();
         
        /**
         * Configura tamanho da tela
         */
        this.setSize(800, 380);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnImagem1 = new javax.swing.JButton();
        btnImagem2 = new javax.swing.JButton();
        cbOperacao = new javax.swing.JComboBox<>();
        btnGo = new javax.swing.JButton();

        btnImagem1.setText("Escolher Imagem 1");
        btnImagem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImagem1ActionPerformed(evt);
            }
        });

        btnImagem2.setText("Escolher Imagem 2");
        btnImagem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImagem2ActionPerformed(evt);
            }
        });

        cbOperacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR", "XOR", "NOT", "SOMA", "SUBTRAÇÃO", "MULTIPLICAÇÃO", "DIVISÃO" }));
        cbOperacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOperacaoActionPerformed(evt);
            }
        });

        btnGo.setText("Calcular");
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnImagem1)
                .addGap(18, 18, 18)
                .addComponent(btnImagem2)
                .addGap(18, 18, 18)
                .addComponent(cbOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGo)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImagem1)
                    .addComponent(btnImagem2)
                    .addComponent(cbOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGo))
                .addContainerGap(266, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Metodo responsavel pelo click do botao para mostrar a imagem da esquerda
     * @param evt evento de acao em componentes da interface
     */
    private void btnImagem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagem1ActionPerformed
        /**
         * Codigo para abrir o dialogo para escolha da imagem
         * Aceitam se imagens do tipo JPEG, GIF e PNG
         */
        JFileChooser arquivo1 = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG & GIF Images", "jpg", "gif", "png");
        arquivo1.setFileFilter(filter);
        int returnVal = arquivo1.showOpenDialog(getComponent(0));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: " +
                arquivo1.getSelectedFile().getName());
            
            /**
             * Atribuindo a urlImg1 o nome completo
             * da imagem escolhida no dialogo aberto anteriormente
             */
            urlImg1 = arquivo1.getSelectedFile().getName();
           
            Image img1 = (new ImageIcon(urlImg1)).getImage();

            /**
             * Exibe imagem na Tela
             */
            Imagem1 image1 = new Imagem1(img1);
            image1.paintComponent(getGraphics());
            add(image1);
        }
    }//GEN-LAST:event_btnImagem1ActionPerformed

    /**
     * Metodo responsavel pelo click do botao que escolhe e abre a imagem da direita
     * @param evt evento de acao de componente da interface de usuario
     */
    private void btnImagem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagem2ActionPerformed
        /**
         * Codigo para abrir o dialogo para escolha da imagem
         * Aceitam se imagens do tipo JPEG, GIF e PNG
         */
        JFileChooser arquivo1 = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG & GIF Images", "jpg", "gif");
        arquivo1.setFileFilter(filter);
        int returnVal = arquivo1.showOpenDialog(getComponent(0));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: " +
                arquivo1.getSelectedFile().getName());
            /**
             * Atribui a urlImg2 o caminho da imagem escolhida
             */
            urlImg2 = arquivo1.getSelectedFile().getName();
           
            Image img1 = (new ImageIcon(urlImg2)).getImage();
            
            /**
             * Exibe imagem na Tela
             */
            Imagem2 image2 = new Imagem2(img1);
            image2.paintComponent(getGraphics());
            add(image2);
        }
    }//GEN-LAST:event_btnImagem2ActionPerformed

    private void cbOperacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOperacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbOperacaoActionPerformed

    /**
     * Metodo responsavel pelo evento de click no botao para realizar as 
     * operações entre as imagens previamente escolhidas.
     * @param evt 
     */
    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /**
         * Obtem operacao escolhida
         */
        String action = cbOperacao.getSelectedItem().toString();

        /**
         * Transforma imagem em uma matriz para facilitar manipulacao
         */
        Mat image1 = Imgcodecs.imread(urlImg1);
        Mat image2 = Imgcodecs.imread(urlImg2);
        
        /**
         * Cria matriz para imagem de saida de tamanho 256x256
         */
        Mat output = new Mat(256,256,CvType.CV_8UC3);
        
        /**
         * Transforma matrizes em imagens (matrizes) binárias
         * Limiar = 128
         */
        Mat image1bin = new Mat(); 
        Mat image2bin = new Mat();
        Imgproc.cvtColor(image1, image1bin, Imgproc.COLOR_RGB2GRAY);
        Imgproc.cvtColor(image2, image2bin, Imgproc.COLOR_RGB2GRAY);
        
        for(int i = 0; i < image1bin.rows(); i++){
            for(int j = 0; j < image1bin.cols(); j++){
                if(image1bin.get(i, j)[0] > 128){
                    image1bin.put(i, j, 255);
                }else{
                    image1bin.put(i, j, 0);
                }
                if(image2bin.get(i, j)[0] > 128){
                    image2bin.put(i, j, 255);
                }else{
                    image2bin.put(i, j, 0);
                }
            }
        }
        
        /**
         * Realiza a operacao escolhida utlizando metodos do framework opencv
         * e salva o resultado em na imagem output.jpg
         */
        switch(action){
            case "AND":
                /**
                 * bitwise_and(matriz1, matriz2, matrizSaida)
                 */
                Core.bitwise_and(image1bin, image2bin, output);                
                Imgcodecs.imwrite("output.jpg", output);
                break;
            case "OR":
                /**
                 * bitwise_or(matriz1, matriz2, matrizSaida)
                 */
                Core.bitwise_or(image1bin, image2bin, output);
                Imgcodecs.imwrite("output.jpg", output);
                break;
            case "XOR":
                /**
                 * bitwise_xor(matriz1, matriz2, matrizSaida)
                 */
                Core.bitwise_xor(image1bin, image2bin, output);
                Imgcodecs.imwrite("output.jpg", output);
                break;
            case "NOT":
                /**
                 * bitwise_and(matriz1, matrizSaida)
                 * neste caso, sempre sera a imagem da esquerda
                 */
                Core.bitwise_not(image1bin, output);
                Imgcodecs.imwrite("output.jpg", output);
                break;
            case "SOMA":
                /**
                 * add(matriz1, matriz2, matrizSaida)
                 */
                Core.add(image1, image2, output);
                Imgcodecs.imwrite("output.jpg", output);
                break;
            case "SUBTRAÇÃO":
                /**
                 * subtract(matriz1, matriz2, matrizSaida)
                 */
                Core.subtract(image1, image2, output);
                Imgcodecs.imwrite("output.jpg", output);
                break;
            case "MULTIPLICAÇÃO":
                /**
                 * multiply(matriz1, matriz2, matrizSaida)
                 */
                Core.multiply(image1, image2, output);
                Imgcodecs.imwrite("output.jpg", output);
                break;
            case "DIVISÃO":
                /**
                 * divide(matriz1, matriz2, matrizSaida)
                 */
                Core.divide(image1, image2, output);
                Imgcodecs.imwrite("output.jpg", output);
                break;
        }
        
        /**
         * Ao finalizar a operacao, mostra imagem do resultado na Tela
         */
        System.out.println("Finalizado");
        Image out = new ImageIcon("output.jpg").getImage();
        Output image3 = new Output(out);
        image3.paintComponent(getGraphics());
        add(image3);
    }//GEN-LAST:event_btnGoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Questao1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Questao1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Questao1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Questao1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Questao1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnImagem1;
    private javax.swing.JButton btnImagem2;
    private javax.swing.JComboBox<String> cbOperacao;
    // End of variables declaration//GEN-END:variables
}

/**
 * Classe para facilitar a visualizacao da imagem da esquerda
 * @author Ana Coimbra
 */
class Imagem1 extends JPanel { 
    private Image img; 
    
    public Imagem1(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    @Override
    public void paintComponent(Graphics g) {
        g.drawImage(img, 10, 88, null);
    } 
} 

/**
 * Classe para facilitar a visualizacao da imagem da direita
 * @author Ana Coimbra
 */
class Imagem2 extends JPanel { 
    private Image img; 
    
    public Imagem2(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 276, 88, null);
    } 
} 

/**
 * Classe para facilitar a visualizacao da imagem de resultado
 * @author Ana Coimbra
 */
class Output extends JPanel { 
    private Image img; 
    
    public Output(Image img) { 
        this.img = img; 
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null)); 
        setPreferredSize(size); 
        setMinimumSize(size); 
        setMaximumSize(size); 
        setSize(size); 
        setLayout(null); 
    } 
    
    public void paintComponent(Graphics g) {
        g.drawImage(img, 542, 88, null);
    } 
} 
